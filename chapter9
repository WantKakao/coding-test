#2
#플로이드 워셜 알고리즘 (N < 100)
INF = 1e9
n, m = map(int, input().split())
graph = [[INF] * (n+1) for _ in range(n+1)]
for _ in range(m):
    a, b = map(int, input().split())
    graph[a][b] = 1
    graph[b][a] = 1

for i in range(n+1):
    for j in range(n+1):
        for k in range(n+1):
            graph[j][k] = min(graph[j][k], graph[j][i] + graph[i][k])

x, k = map(int, input().split())
distance = graph[1][k] + graph[k][x]
if distance >= INF:
    print('-1')
else:
    print(distance)
    
    
    
#3
#다익스트라 알고리즘
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

n, m, start = map(int, input().split())
graph = [[] for _ in range(n+1)]   #[[], [], [], []]
distance = [INF] * (n+1)

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b, c))

def dijkstra(start):
    q = []   #q = [(거리, 도시)]
    heapq.heappush(q, (0, start))   #거리가 낮은순으로 자동 정렬
    distance[start] = 0
    while q:   #q가 비어있지 않으면 실행
        dist, now = heapq.heappop(q)
        if distance[now] < dist:   #이미 실행한 적 있는 최소값이면 패스
            continue
        for i in graph[now]:   #now 에서 갈수 있는곳들
            cost = dist + i[1]
            if cost < distance[i[0]]:   #최소값 갱신
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)
count = 0
maxdis = 0
for i in distance:
    if i != INF:
        count += 1
        maxdis = max(maxdis, i)

print(count-1, maxdis)
