#dijkstra algorithm
import sys
input = sys.stdin.readline
INF = 1e9

n, m = map(int, input().split())
start = int(input())

graph = [[] for i in range(n+1)]   #0에서 n까지 n+1개
visited = [False] * (n+1)
distance = [INF] * (n+1)

for i in range(m):
    a, b, c = map(int, input().split())
    graph[a].append([b, c])

def smallest():   #왜 함수옆에 아무것도 안써도 될까?
    min_value = INF
    index = 0
    for i in range(n+1):
        if distance[i] < min_value and not visited[i]:
            #visited[i]는 방문안했을때 False이므로 not False = True
            min_value = distance[i]
            index = i
    return index

def short(start):
    distance[start] = 0
    visited[start] = True
    for i in graph[start]:
        distance[i[0]] = i[1]
    for _ in range(n-1):   #start빼고 n-1번 반복만 하면 된다
        now = smallest()
        visited[now] = True
        for i in graph[now]:
            cost = distance[now] + i[1]
            if cost < distance[i[0]]:   #i=[b, c]
                distance[i[0]] = cost

short(start)

for i in range(1, n+1):
    print(distance[i])
    
    
    
#improved dijkstra
import heapq
import sys
input = sys.stdin.readline
INF = 1e9

m, n = map(int, input().split())
start = int(input())
graph = [[] for i in range(m+1)]   #[[] * (m+1)]로 하면 순서 구분이 안된다.
distance = [INF] * (m+1)
for i in range(n):
    a, b, c = map(int, input().split())
    graph[a].append([b, c])

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:   #q가 비어있지 않을때
        dist, now = heapq.heappop(q)
        if distance[now] < dist:   #q에는 q[0]가 짧은 순으로 자동 정렬, 첫번째부터 호출.
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))   #q = [(거리, 노드)]

dijkstra(start)

for i in range(1, m+1):
    print(distance[i]) 
    
    
    
#floyd-warshall
INF = 1e9

n = int(input())
m = int(input())
graph = [[INF] * (n+1) for _ in range(n+1)]

for a in range(1, n+1):
    for b in range(1, n+1):
        if a == b:
            graph[a][b] = 0

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a][b] = c

for k in range(1, n+1):
    for a in range(1, n + 1):
        for b in range(1, n + 1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

for a in range(1, n+1):
    for b in range(1, n + 1):
        print(graph[a][b], end = ' ')
    print()
