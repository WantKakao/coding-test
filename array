# 선택정렬, O(N^2)
array = [8, 9, 1, 3, 4, 7, 0, 5, 2, 6]

for i in range(len(array)):
    min_index = i
    for j in range(i+1, len(array)):
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i]

print(array)

# 삽입정렬, O(N^2) 이지만 최선의 경우 O(N)
array = [8, 9, 1, 3, 4, 7, 0, 5, 2, 6]

for i in range(1, len(array)):
    for j in range(i, 0, -1):
        if array[j] < array[j-1]:
            array[j], array[j-1] = array[j-1], array[j]
        else:
            break

print(array)

# 퀵정렬, O(NlogN)
array = [8, 9, 1, 3, 4, 7, 0, 5, 2, 6]

def quick_sort(list, start, end):
    if start >= end:     # 리스트 크기가 1일때 종료
        return
    pivot = start     # list[0] 이랑 뭐가다르지?
    left = start + 1
    right = end
    while left <= right:
        while left <= end and list[left] <= list[pivot]:
            left += 1
        while right > start and list[right] >= list[pivot]:
            right -= 1
        if left > right:
            list[pivot], list[right] = list[right], list[pivot]
        else:
            list[left], list[right] = list[right], list[left]

    quick_sort(list, 0, right-1)
    quick_sort(list, right+1, end)

quick_sort(array, 0, len(array)-1)
print(array)

# 계수정렬 , O(N+K) 이지만 특정 상황에서만 사용가능
array = [1,5,1,2,0,4,5,1,3,6,9,8,7,5,2,1,5,9]

count = [0] * (max(array) + 1)

for i in array:
    count[i] += 1

for i in range(len(count)):
    for j in range(count[i]):
        print(i, end=' ')

# sorted(array) 나 array.sort() 는 시간복잡도가 O(NlogN)
